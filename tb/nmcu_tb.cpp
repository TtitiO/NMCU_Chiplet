#include <iostream> // For std::cout, std::endl
#include <verilated.h>
#include <verilated_vcd_c.h> // Required for VCD tracing

// Include the header generated by Verilator for your top module
// This name depends on your --top-module argument, which is nmcu_tb
#include "Vnmcu_tb.h"

// Define main_time as a global variable, required for Verilator's time tracking
vluint64_t main_time = 0;

// Callback function for Verilator's time advancement
// Verilator will call this when it needs to get the current simulation time
double sc_time_stamp() {
    return main_time;
}

int main(int argc, char** argv) {
    // Initialize Verilator (parse command line args etc.)
    Verilated::commandArgs(argc, argv);

    // Create an instance of your top module
    Vnmcu_tb* top = new Vnmcu_tb;

    // Setup VCD tracing
    Verilated::traceEverOn(true); // Enable tracing
    VerilatedVcdC* tfp = new VerilatedVcdC; // Create a trace file pointer
    top->trace(tfp, 99); // Trace all signals at all levels (99 is a common depth)
    tfp->open("nmcu_tb.vcd"); // Open the VCD file for writing

    std::cout << "C++ Main: Starting simulation loop." << std::endl;

    // Main simulation loop
    // Loop until $finish is called from SystemVerilog or a time limit is reached
    while (!Verilated::gotFinish() && main_time < 10000000) { // Example time limit: 1ms (1,000,000 ps)
        // You generally advance time by the smallest time unit defined in your timescale (1ps)
        // or by a fixed number of clock cycles, then evaluate.
        // For this simple case, just advancing by 1 unit and evaluating works.
        main_time++; // Advance time by 1 unit (1ps based on --timescale 1ns/1ps)

        // Evaluate the module at the current time
        top->eval();

        // Dump waveforms to VCD file
        tfp->dump(main_time);
    }

    std::cout << "C++ Main: Simulation loop finished at time " << main_time << std::endl;

    // Clean up
    top->final(); // Call final() method for any cleanup required by Verilator
    tfp->close(); // Close the VCD file
    delete top; // Deallocate the top module instance
    delete tfp; // Deallocate the trace file pointer

    return 0;
}
